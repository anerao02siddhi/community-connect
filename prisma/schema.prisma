generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  password    String
  role        String    @default("user")
  image       String[]
  phone       String
  profileImage   String?  // Add this if not already present
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLogin   DateTime?
  isApproved  Boolean  @default(false)   // ← This is important
  isSuspended  Boolean  @default(false)    // ✅ Add this
  posts       Post[]    @relation("UserPosts")
  comments    Comment[] @relation("UserComments")
  resetToken       String?   // nullable
  resetTokenExpiry DateTime? // nullable
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String[]
  afterImageUrl  String[] @default([])
  location    String
  coordinates Json?
  status      String   @default("Open")

  category    String?   // NEW: Main Problem Category
  issueType   String?   // NEW: Specific Issue Type

  pincode     String?
  state       String?
  district    String?
  taluka      String?
  address     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserPosts", fields: [userId], references: [id])
  userId      String   @db.ObjectId

  comments    Comment[] @relation("PostComments")
  upvotes     Int       @default(0)
  upvotedBy   String[]  @default([])
}


model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation("PostComments", fields: [postId], references: [id],onDelete: Cascade)
  postId    String   @db.ObjectId

  user      User?    @relation("UserComments", fields: [userId], references: [id])
  userId    String?  @db.ObjectId
    // Self-referencing for replies
  parentId String?  
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")
}
